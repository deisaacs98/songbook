DROP TABLE IF EXISTS user;
DROP TABLE IF EXISTS song;
DROP TABLE IF EXISTS track;
DROP TABLE IF EXISTS bar;
DROP TABLE IF EXISTS note;

CREATE TABLE user (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  username TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL
);

CREATE TABLE song (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  composer_id INTEGER NOT NULL,
  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title TEXT NOT NULL,
  author TEXT NULL,
  description TEXT NULL,
  email TEXT NULL,
  subtitle TEXT NULL,
  FOREIGN KEY (composer_id) REFERENCES user (id)
);

CREATE TABLE track (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  composer_id INTEGER NOT NULL,
  song_id INTEGER NOT NULL,
  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  instrument TEXT NOT NULL,
  tuning TEXT NULL,
  name TEXT NULL,
  FOREIGN KEY (composer_id) REFERENCES user(id)
);

CREATE TABLE bar (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  composer_id INTEGER NOT NULL,
  song_id INTEGER NOT NULL,
  track_id INTEGER NOT NULL,
  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  key_sig TEXT NOT NULL,
  meter TEXT NOT NULL,
  bar_text TEXT NOT NULL,
  FOREIGN KEY (composer_id) REFERENCES user(id)
);

CREATE TABLE note (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    composer_id INTEGER NOT NULL,
    song_id INTEGER NOT NULL,
    track_id INTEGER NOT NULL,
    bar_id INTEGER NOT NULL,
    created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    duration DOUBLE NOT NULL,
    name TEXT NOT NULL,
    octave INTEGER NOT NULL,
    dynamics TEXT NOT NULL,
    FOREIGN KEY (composer_id) REFERENCES user(id)
);

